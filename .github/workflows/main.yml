name: Deploy no ECR
#aa
on:
  push:
    branches: [master]

jobs: 
 
  # build:
  #   name: Instalar dependencias e Construir
  #   runs-on: ubuntu-latest 

  #   steps: 
  #     - name: Verificar código  
  #       uses: actions/checkout@v2
 
  #     - name: Instala Dependencias e Construir
  #       run: |
  #         npm install 
  #         npm run build

  # test:
  #   name: Testar 
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Verificar código
  #       uses: actions/checkout@v2

  #     - name: Usar cache das dependências do Node.js
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           node_modules
  #         key: npm-${{ hashFiles('package-lock.json') }} 
  #         restore-keys: |
  #           npm-

  #     - name: Executar testes
  #       run: |
  #         npm install
  #         npm run test
          
  terraform:
    env:
      HOST: ""
    name: Terraform
    runs-on: ubuntu-latest

    
    #needs: test
    steps:
    
      - name: Checkout do repositório
        uses: actions/checkout@v2
        
      - name: Instalar Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform -y
      
      - name: Seed Terraform
        run : |
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/key -N ""
          
          cat ~/.ssh/key.pub >> ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/key
          
          cd terraform-ec2
          terraform init
          terraform destroy -var="AWS_REGION=us-east-1" -var="public_key=$(cat ~/.ssh/key.pub)" -var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var="AWS_TOKEN=${{ secrets.AWS_TOKEN }}"
          terraform apply -auto-approve -var="AWS_REGION=us-east-1" -var="public_key=$(cat ~/.ssh/key.pub)" -var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var="AWS_TOKEN=${{ secrets.AWS_TOKEN }}"
      
          # Extrair o IP público do terraform.tfstate usando jq
          IP=$(jq -r '.resources[] | select(.type == "aws_instance" and .name == "tcb_blog_ec2") | .instances[0].attributes.public_ip' terraform.tfstate) >> $GITHUB_ENV
          
          # Verificar se o IP não está vazio 
          if [ -n "$IP" ]; then
            echo "Public IP: $IP"  
            echo "HOST=${IP}" >> $GITHUB_ENV
            echo "HOST: ${{ env.IP }}"
          else
            echo "Erro: IP público não encontrado no arquivo terraform.tfstate."
            exit 1
          fi

          chmod 600 ~/.ssh/key
          cat ~/.ssh/key
          #sleep 200
          #ssh -o StrictHostKeyChecking=no -v -i ~/.ssh/key ubuntu@$IP

      - name: Add delay before running playbook
        run: sleep 180

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
  
      - name: Create SSH key
        run: |
          cat ~/.ssh/key.pub >> ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/authorized_keys
          chmod 644 ~/.ssh/key.pub
  
      - name: Run Ansible playbook locally
        run: |
          ansible-playbook deploy.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          ANSIBLE_PRIVATE_KEY_FILE: "~/.ssh/key"
  
      - name: Run Ansible playbook with GitHub Action
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy.yml
          key: ~/.ssh/key
          inventory: |
            localhost ansible_connection=local
          options: |
            --extra-vars hello=there
            --verbose


  #   name: Construir Imagem e Enviar para o Amazon ECR
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Verificar código
  #       uses: actions/checkout@v2

  #     - name: Configurar credenciais da AWS
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #         aws-session-token: ${{ secrets.AWS_TOKEN }}

  #     - name: Fazer login no Amazon ECR
  #       id: login-ecr
  #       run: |
  #         aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_URL }}

  #     - name: Construir, adicionar tag e enviar imagem para o Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ secrets.AWS_URL }}
  #         ECR_REPOSITORY: ${{ secrets.AWS_IMAGE }}
  #       run: |
  #         docker build -t $ECR_REPOSITORY .
  #         docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
